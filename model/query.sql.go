// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package model

import (
	"context"
	"time"
)

const createCurrency = `-- name: CreateCurrency :one
INSERT INTO currency (
  code, value, updated_at
) VALUES (
  $1, $2, $3
)
RETURNING id, code, value, updated_at
`

type CreateCurrencyParams struct {
	Code      string
	Value     float64
	UpdatedAt time.Time
}

func (q *Queries) CreateCurrency(ctx context.Context, arg CreateCurrencyParams) (Currency, error) {
	row := q.db.QueryRowContext(ctx, createCurrency, arg.Code, arg.Value, arg.UpdatedAt)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Value,
		&i.UpdatedAt,
	)
	return i, err
}

const createLog = `-- name: CreateLog :one
INSERT INTO log (
  duration, code, request, created_at
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, duration, code, request, created_at
`

type CreateLogParams struct {
	Duration  int32
	Code      int32
	Request   string
	CreatedAt time.Time
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (Log, error) {
	row := q.db.QueryRowContext(ctx, createLog,
		arg.Duration,
		arg.Code,
		arg.Request,
		arg.CreatedAt,
	)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Duration,
		&i.Code,
		&i.Request,
		&i.CreatedAt,
	)
	return i, err
}

const getAllCurrencies = `-- name: GetAllCurrencies :many
SELECT id, code, value, updated_at FROM currency
WHERE code != 'ALL' AND updated_at BETWEEN SYMMETRIC $1 AND $2
`

type GetAllCurrenciesParams struct {
	UpdatedAt   time.Time
	UpdatedAt_2 time.Time
}

func (q *Queries) GetAllCurrencies(ctx context.Context, arg GetAllCurrenciesParams) ([]Currency, error) {
	rows, err := q.db.QueryContext(ctx, getAllCurrencies, arg.UpdatedAt, arg.UpdatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Currency
	for rows.Next() {
		var i Currency
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Value,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCurrenciesByCode = `-- name: GetCurrenciesByCode :many
SELECT id, code, value, updated_at FROM currency
WHERE code = $1 AND updated_at BETWEEN SYMMETRIC $2 AND $3
`

type GetCurrenciesByCodeParams struct {
	Code        string
	UpdatedAt   time.Time
	UpdatedAt_2 time.Time
}

func (q *Queries) GetCurrenciesByCode(ctx context.Context, arg GetCurrenciesByCodeParams) ([]Currency, error) {
	rows, err := q.db.QueryContext(ctx, getCurrenciesByCode, arg.Code, arg.UpdatedAt, arg.UpdatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Currency
	for rows.Next() {
		var i Currency
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Value,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCurrencies = `-- name: ListCurrencies :many
SELECT id, code, value, updated_at FROM currency
ORDER BY code
`

func (q *Queries) ListCurrencies(ctx context.Context) ([]Currency, error) {
	rows, err := q.db.QueryContext(ctx, listCurrencies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Currency
	for rows.Next() {
		var i Currency
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Value,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
